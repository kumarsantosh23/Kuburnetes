kubectl get pods
kubectl get nodes
kubectl describe nodes
kubectl describe pods
kubectl get replicaset
kubectl create - replicaset-definition.yml
kubectl apply -f replicaset-defintion.yml
kubectl edit replicaset new-replica-set
kubectl scale --replicas=5 replicaset new-replica-set
kubectl create deployment http-frontend --image=httpd-alpine
kubectl scale deployment http-frontend --replicas=3
kubectl create -f deployment-definition.yml
kubectl apply -f deployment-definition.yml
kubectl describe deployment
kubectl rollout undo deployment/myapp-replicaset
kubectl rollout status deployment/myapp-replicaset
kubectl rollout undo deployment/myapp-replicaset
kubectl create -f service-definition.yml
kubectl delete service voting-service
kubectl get services
kubectl get pods -0 wide
kubectl get nodes -o wide
kubectl get services -o wide
kubectl delete pod
kubectl delete service
kubectl describe service

-----------------------------------------------------------------------------
namespaces commands

kubectl get namespace
kubectl get pods --namespace=finance
kubectl get deployments --namespace=finance
kubectl delete  deployments redis  --namespace=finance
kubectl create -f pod.yml --namespace=finance
kubectl get pods  --namespace=finance
kubectl get pods --all-namespaces
kubectl config set-context $(kubectl config current-context) --namespace=default
kubectl config set-context $(kubectl config current-context) --namespace=dev
kubectl run redis --image=redis --restart=Never --dry-run -o yaml > pod.yml ( to convert it to yaml for pod )
kubectl create  deployment nginx --image=nginx  --dry-run=client -o yaml > d.yaml ( to convert it to yaml for deployment)
kubectl get ep webapp-service ( to see endpoint after service gets created)

---------------------------------------------------------------------------------------------------------------------------------------
IMPERATIVE COMMANDS WHICH WILL BE USEFULL TO CREATE DEFINITION YAML FILES AND RUN THINGS DIRECTLY

kubectl run redis --image=redis:alpine --dry-run=client -o yaml > pod.yml
kubectl apply pod.yml
kubectl create deployment webapp --image=kodekloud/webapp-color --dry-run=client -o yaml > def_correct.yml
kubectl create deployment webapp --image=kodekloud/webapp-color
kubectl scale deployment webapp --replicas=3
kubectl create ns dev-ns
kubectl create deployment redis-deploy --image=redis --namespace=dev-ns
kubectl scale deployment redis-deploy --replicas=2 --namespace=dev-ns
kubectl run httpd --image=httpd:alpine --port=80 --expose
kubectl create service clusterip httpd --tcp=80:80 --dry-run=client -o yaml > servoce4.yml
kubectl expose deployment simple-webapp-deployment --type=NodePort --target-port=8080 --target-port=8080 --name=webapp-service --dry-run -o yaml > svc.yml
kubectl run redis --image=redis --restart=Never --dry-run -o yaml > pod.yml ( to convert it to yaml for pod )

----------------------------------------------------------------------------------------------------------------------------------------------------

Below is the imperative commands to run a deployment of nginx webserver and exposing the ports

kubectl create  deployment nginx --image=nginx  --dry-run=client -o yaml > d.yaml ( to convert it to yaml for deployment)
kubectl scale deployment nginx --replicas=6
Use below version for services of deployment ( using nodeport as type )
kubectl expose deployment webserver --port=80 --name web-service --dry-run=client -o yaml > service.yml
vi service.yml and then change the type: NodePort and add nodePort: 30028 ( nodeport for example)
kubectl apply -f service.yml
To check if the pods are accessable to that ports do below commands
kubectl get ep webservice
kubectl get nodes -o wide
curl http://nodeipaddress: 30028 ( port which we exposed in above )

----------------------------------------------------------------------------------------------------------------------------------------------------
Below are the commands to filter out pods/replicas/services/objects based on selectors

kubectl get pods --selector env=prod
kubectl get replicasets --selector env=prod
kubectl get all --selector env=pod,bu=finance,tier=frontend
kubectl get pods --selector env=pod,bu=finance,tier=frontend

-------------------------------------------------------------------------------------------------------------------------------------------------------
Taints and Tolerations

kubectl taint nodes node01 spray=mortein:NoSchedule ( Existing pods won't terminate but won't allow new pods to be assigned )
kubectl describe nodes master | grep Taint
kubectl taint nodes node01 spray=mortein:NoSchedule-
kubectl taint nodes node01 app=mos:NoExecute ( This will terminate the pods if already existing after applying taint)
kubectl taint nodes node01 app=mos:NoExecute-

Node Affinity

kubectl label  node node01 --color=blue
